#!/usr/bin/env python3

"""
Phynteny: synteny-based annotation of phage genes
"""

import argparse
import sys
from phynteny_utils import handle_genbank
from phynteny_utils import predictor
from Bio import SeqIO

__author__ = "Susanna Grigson"
__maintainer__ = "Susanna Grigson"
__license__ = "MIT"
__version__ = "0"
__email__ = "susie.grigson@gmail.com"
__status__ = "development"

# dictionary paths
phrog_categories = "phrog_annotation_info/phrog_integer.pkl"
category_names = "phrog_annotation_info/integer_category.pkl"


def parse_args():
    parser = argparse.ArgumentParser(
        description="Phynteny: synteny-based annotation of phage genes"
    )
    parser.add_argument("infile", help="input file in genbank format")
    parser.add_argument(
        "-o",
        "--outfile",
        action="store",
        default=sys.stdout,
        type=str,
        help="where to write the output genbank file",
    )
    parser.add_argument(
        "-m",
        "--model",
        action="store",
        help="Path to custom LSTM model",
        default="model/all_chunk_trained_LSTMbest_val_loss.h5",
    )
    parser.add_argument(
        "-t",
        "--thresholds",
        action="store",
        help="Path to dictionaries for a custom LSTM model",
        default="model/all_chunk_trained_LSTMbest_val_loss_thresholds.pkl",
    )
    parser.add_argument("-V", "--version", action="version", version=__version__)

    return parser.parse_args()


def main():
    # Setup
    # ---------------------------------------------------

    # get arguments
    args = parse_args()

    # get entries in the genbank file
    gb_dict = handle_genbank.get_genbank(args.infile)
    if not gb_dict:
        sys.stdout.write("Error: no sequences found in genbank file\n")
        sys.exit()
    keys = list(gb_dict.keys())

    # create predictor object
    gene_predictor = predictor.Predictor(
        args.model, phrog_categories, args.thresholds, category_names
    )

    # Run Phynteny
    # ---------------------------------------------------

    with open(args.outfile, "wt") as handle:
        for key in keys:
            # get current phage
            phages = {key: handle_genbank.extract_features(gb_dict.get(key))}

            # get phrog annotations
            phages[key]["phrogs"] = [
                0 if i == "No_PHROG" else int(i) for i in phages[key]["phrogs"]
            ]

            # make predictions
            phynteny = gene_predictor.predict_annotations(phages)

            # update with these annotations
            cds = [i for i in gb_dict.get(key).features if i.type == "CDS"]

            for i in range(len(cds)):
                cds[i].qualifiers["phynteny"] = phynteny[i]

            # write to genbank file
            SeqIO.write(gb_dict.get(key), handle, "genbank")

    handle.close()


if __name__ == "__main__":
    main()
