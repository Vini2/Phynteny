#!/usr/bin/env python3

"""
Phynteny: synteny-based annotation of phage genes
"""

import sys
import click
from phynteny_utils import handle_genbank
from phynteny_utils import predictor
from Bio import SeqIO

__author__ = "Susanna Grigson"
__maintainer__ = "Susanna Grigson"
__license__ = "MIT"
__version__ = "0"
__email__ = "susie.grigson@gmail.com"
__status__ = "development"

# dictionary paths


phrog_categories = "phrog_annotation_info/phrog_integer.pkl"
category_names = "phrog_annotation_info/integer_category.pkl"


@click.command()
@click.argument("infile", type=click.Path(exists=True))
@click.option(
    "-o",
    "--outfile",
    type=click.Path(),
    help="where to write the output genbank file",
)
@click.option(
    "-m",
    "--model",
    type=click.Path(exists=True),
    help="Path to custom LSTM model",
    default="model/all_chunk_trained_LSTMbest_val_loss.h5",
)
@click.option(
    "-t",
    "--thresholds",
    type=click.Path(exists=True),
    help="Path to dictionaries for a custom LSTM model",
    default="model/all_chunk_trained_LSTMbest_val_loss_thresholds.pkl",
)
@click.version_option(version=__version__)
def main(infile, outfile, model, thresholds):
    """
    Phynteny: synteny-based annotation of phage genes
    """

    # get the absolute path to the directory containing this script
    current_dir = os.path.dirname(os.path.abspath(__file__))
    data_dir = os.path.join(current_dir, 'phrog_annotation_info')
    phrog_categories = os.path.join(data_dir, 'phrog_annotation_info/phrog_integer.pkl')
    category_names = os.path.join(data_dir, "phrog_annotation_info/integer_category.pkl")

    # get entries in the genbank file
    gb_dict = handle_genbank.get_genbank(infile)
    if not gb_dict:
        click.echo("Error: no sequences found in genbank file")
        sys.exit()
    keys = list(gb_dict.keys())

    # create predictor object
    gene_predictor = predictor.Predictor(model, phrog_categories, thresholds, category_names)

    # Run Phynteny
    with click.open_file(outfile, "wt") if outfile else sys.stdout as handle:

        for key in keys:

            # get current phage
            phages = {key: handle_genbank.extract_features(gb_dict.get(key))}

            # get phrog annotations
            phages[key]["phrogs"] = [
                0 if i == "No_PHROG" else int(i) for i in phages[key]["phrogs"]
            ]

            # make predictions
            phynteny = gene_predictor.predict_annotations(phages)

            # update with these annotations
            cds = [i for i in gb_dict.get(key).features if i.type == "CDS"]

            for i in range(len(cds)):
                cds[i].qualifiers["phynteny"] = phynteny[i]

            # write to genbank file
            SeqIO.write(gb_dict.get(key), handle, "genbank")


if __name__ == "__main__":
    main()

